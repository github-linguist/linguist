def forall( l : [Bool] ) -> Bool {
  fold acc = true, x <- l do
    (acc and x)
  end
}

def boolean_list_eq( l1 : [Bool], l2 : [Bool] ) -> Bool {

  def boolean_list_compare( l1 : [Bool], l2 : [Bool] ) -> [Bool] {
    for x1 <- l1, x2 <- l2 do
      ( ( x1 and x2 ) or not( x1 or x2 ) ) : Bool
    end
  }
  
  let cmp : [Bool] = boolean_list_compare( l1 = l1, l2 = l2 );
  forall( l = cmp )
}


def string_list_eq( l1 : [Str], l2 : [Str] ) -> Bool {

  def string_list_compare( l1 : [Str], l2 : [Str] ) -> [Bool] {
    for x1 <- l1, x2 <- l2 do
      ( x1 == x2 ) : Bool
    end
  }
  
  let cmp : [Bool] = string_list_compare( l1 = l1, l2 = l2 );
  forall( l = cmp )
}






 def output_bool() -> <Out1 : Bool, Out2 : Bool>
in Erlang *{
  Out1 = true,
  Out2 = false
}*

let <Out1 = c1 : Bool, Out2 = d1 : Bool> =
  output_bool();

let output_bool_test : Str =
  if( not c1 or d1 )
  then
    error "output_bool" : Str
  else
    "ok"
  end;




def input_bool( A : Bool, B : Bool ) -> <Out : Str>
in Erlang *{

  Out =
    if
      A and not B -> "ok";
      true        -> error( "bad input binding" )
    end
}*

let <Out = input_bool_test : Str> =
  input_bool( A = true, B = false );





def output_string() -> <Out : Str>
in Erlang *{
  Out = "blub"
}*

let <Out = c2 : Str> = output_string();

let output_string_test : Str =
  if( c2 == "blub" )
  then
    "ok"
  else
    error "output_string" : Str
  end;







def input_string( A : Str ) -> <Out : Str>
in Erlang *{
  Out =
    if
      A =:= "blub" -> "ok";
      true         -> error( "bad input binding" )
    end
}*

let <Out = input_string_test : Str> =
  input_string( A = "blub" );



def output_boolean_list() -> <Out : [Bool]>
in Erlang *{
  Out = [true, false, true]
}*

let <Out = c3 : [Bool]> = output_boolean_list();

let d3 : [Bool] = [true, false, true : Bool];

let output_boolean_list_test : Str =
  if boolean_list_eq( l1 = c3, l2 = d3 )
  then
    "ok"
  else
    error "output_boolean_list" : Str
  end;





def output_string_list() -> <Out : [Str]>
in Erlang *{
  Out = ["a", "b", "c"]
}*

let <Out = c4 : [Str]> = output_string_list();

let d4 : [Str] = ["a", "b", "c" : Str];

let output_string_list_test : Str =
  if string_list_eq( l1 = c4, l2 = d4 )
  then
    "ok"
  else
    error "output_string_list" : Str
  end;




def write_file( Inp : Str ) -> <F : File>
in Erlang *{
  F = "out.txt",
  ok = file:write_file( F, Inp )
}*

def read_file( F : File ) -> <Out : Str>
in Erlang *{
  {ok, B} = file:read_file( F ),
  Out = binary_to_list( B )
}*

let c5 : Str = "blub";

let <Out = d5 : Str> =
  read_file( F = ( write_file( Inp = c5 )|F ) );

let file_test : Str =
  if( c5 == d5 )
  then
    "ok"
  else
    error "file_test" : Str
  end;




[output_bool_test,
 input_bool_test,
 output_string_test,
 input_string_test,
 output_boolean_list_test,
 output_string_list_test,
 file_test : Str];


