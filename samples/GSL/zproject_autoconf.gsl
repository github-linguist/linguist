.#  ===========================================================================
.#  Generate autoconf files for project
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details. This script
.#  is licensed under MIT/X11.
.#
.#  This script will generate the following files:
.#      * autogen.sh
.#      * version.sh
.#      * configure.ac
.#  ===========================================================================
.#
.echo "Generating autogen.sh ..."
.output "autogen.sh"
#!/usr/bin/env sh
$(project.GENERATED_WARNING_HEADER:)

#   Script to generate all required files from fresh git checkout.

# Debian and Ubuntu do not shipt libtool anymore, but OSX does not ship libtoolize.
command -v libtoolize >/dev/null 2>&1
if  [ $? -ne 0 ]; then
    command -v libtool >/dev/null 2>&1
    if  [ $? -ne 0 ]; then
        echo "autogen.sh: error: could not find libtool.  libtool is required to run autogen.sh." 1>&2
        exit 1
    fi
fi

command -v autoreconf >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not find autoreconf.  autoconf and automake are required to run autogen.sh." 1>&2
    exit 1
fi

command -v pkg-config >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not find pkg-config.  pkg-config is required to run autogen.sh." 1>&2
    exit 1
fi

mkdir -p ./config
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not create directory: ./config." 1>&2
    exit 1
fi

autoreconf --install --force --verbose -I config
status=$?
if [ $status -ne 0 ]; then
    echo "autogen.sh: error: autoreconf exited with status $status" 1>&2
    exit 1
fi

$(project.GENERATED_WARNING_HEADER:)
.echo "Generating version.sh"
.output "version.sh"
#!/usr/bin/env sh
$(project.GENERATED_WARNING_HEADER:)
#
# This script extracts the version from the project header file
#
project=$1
appendix="_library"
if [ ! -f include/$project$appendix.h ]; then
    echo $(project->version.major).$(project->version.minor).$(project->version.patch) | tr -d '\\n'
    exit 0
fi
MAJOR=`egrep '^#define .*_VERSION_MAJOR +[0-9]+$' include/$project$appendix.h`
MINOR=`egrep '^#define .*_VERSION_MINOR +[0-9]+$' include/$project$appendix.h`
PATCH=`egrep '^#define .*_VERSION_PATCH +[0-9]+$' include/$project$appendix.h`
if [ -z "$MAJOR" -o -z "$MINOR" -o -z "$PATCH" ]; then
    echo "version.sh: error: could not extract version from include/$project$appendix.h" 1>&2
    exit 1
fi
MAJOR=`echo $MAJOR | awk '{ print $3 }'`
MINOR=`echo $MINOR | awk '{ print $3 }'`
PATCH=`echo $PATCH | awk '{ print $3 }'`
echo $MAJOR.$MINOR.$PATCH | tr -d '\\n'

$(project.GENERATED_WARNING_HEADER:)
.echo "Generating configure.ac"
.output "configure.ac"
$(project.GENERATED_WARNING_HEADER:)

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
#
# The version number is extracted from include/$(project.name).h using
# the version.sh script. Hence, it should be updated there.
# The version in git should reflect the *next* version planned.
#
AC_INIT([$(project.name)],[m4_esyscmd([./version.sh $(project.name)])],[$(project.email)])

AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_HEADERS([src/platform.h])
AM_INIT_AUTOMAKE([subdir-objects tar-ustar foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# This defines PACKAGE_VERSION_... in src/platform.h
PV_MAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PV_MINOR=`echo $PACKAGE_VERSION | cut -d . -f 2`
PV_PATCH=`echo $PACKAGE_VERSION | cut -d . -f 3`
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MAJOR],[$PV_MAJOR],
    [$(PROJECT.NAME) major version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MINOR],[$PV_MINOR],
    [$(PROJECT.NAME) minor version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_PATCH],[$PV_PATCH],
    [$(PROJECT.NAME) patchlevel])
# This lets us use PACKAGE_VERSION in Makefiles
AC_SUBST(PACKAGE_VERSION)

#
# Libtool -version-info (ABI version)
#
# Currently 2.0.1 ("stable"). Don't change this unless you
# know exactly what you're doing and have read and understand
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
#
# $(project.libname) -version-info
LTVER="$(project->version.major):$(project->version.minor):0"
AC_SUBST(LTVER)

# Capture c flags
$(PROJECT.NAME)_ORIG_CFLAGS="${CFLAGS:-none}"

# Checks for programs
AC_PROG_CC
AC_PROG_CC_C99
AM_PROG_CC_C_O
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_AWK
PKG_PROG_PKG_CONFIG

.if file.exists ("acinclude.m4")
AX_PROJECT_LOCAL_HOOK # Optional project-local hook (acinclude.m4)

.endif
# Code coverage
AC_ARG_WITH(gcov, [AS_HELP_STRING([--with-gcov=yes/no],
                  [With GCC Code Coverage reporting.])],
                  [$(PROJECT.NAME)_GCOV="$withval"])

if test "x${$(PROJECT.NAME)_GCOV}" == "xyes"; then
    CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"

    if test "x${$(PROJECT.NAME)_ORIG_CFLAGS}" != "xnone"; then
        CFLAGS="${CFLAGS} ${$(PROJECT.NAME)_ORIG_CFLAGS}"
    fi
fi

.# Archive user supplied flags
PREVIOUS_CFLAGS="${CFLAGS}"
PREVIOUS_LIBS="${LIBS}"

.for use

was_$(use.project)_check_lib_detected=no

.  if (use.min_version <> '0.0.0')
PKG_CHECK_MODULES([$(use.project)], [$(use.libname) >= $(use.min_version)],,
    [AC_MSG_ERROR([Cannot find required package for $(use.libname). Note, pkg-config is required due to specified version >= $(use.min_version)])
  ])
.  else
PKG_CHECK_MODULES([$(use.project)], [$(use.libname)],,
    [
        AC_ARG_WITH([$(use.libname)],
            [
                AS_HELP_STRING([--with-$(use.libname)],
                [Specify $(use.libname) prefix])
            ],
            [search_$(use.libname)="yes"],
            [])

        $(use.project)_synthetic_cflags=""
        $(use.project)_synthetic_libs="-l$(use.linkname)"

        if test "x$search_$(use.libname)" = "xyes"; then
            if test -r "${with_$(use.libname)}/include/$(use.project).h"; then
                $(use.project)_synthetic_cflags="-I${with_$(use.libname)}/include"
                $(use.project)_synthetic_libs="-L${with_$(use.libname)}/lib -l$(use.linkname)"
            else
                AC_MSG_ERROR([${with_$(use.libname)}/include/$(use.project).h not found. Please check $(use.libname) prefix])
            fi
        fi

        CFLAGS="${$(use.project)_synthetic_cflags} ${CFLAGS}"
        LDFLAGS="${$(use.project)_synthetic_libs} ${LDFLAGS}"
        LIBS="${$(use.project)_synthetic_libs} ${LIBS}"

        AC_CHECK_LIB([$(use.project)], [$(use.test)],
            [
                AC_SUBST([$(use.project)_CFLAGS],[${$(use.project)_synthetic_cflags}])
                AC_SUBST([$(use.project)_LIBS],[${$(use.project)_synthetic_libs}])
                was_$(use.project)_check_lib_detected=yes
            ],
            [AC_MSG_ERROR([cannot link with -l$(use.linkname), install $(use.libname).])])
    ])
.  endif

if test "x$was_$(use.project)_check_lib_detected" = "xno"; then
    CFLAGS="${$(use.project)_CFLAGS} ${CFLAGS}"
    LIBS="${$(use.project)_LIBS} ${LIBS}"
fi

.endfor

.# Restore user supplied flags
CFLAGS="${PREVIOUS_CFLAGS}"
LIBS="${PREVIOUS_LIBS}"

# Platform specific checks
$(project.name)_on_mingw32="no"
$(project.name)_on_cygwin="no"
$(project.name)_on_android="no"

# Host specific checks
AC_CANONICAL_HOST

# Determine whether or not documentation should be built and installed.
$(project.name)_build_doc="yes"
$(project.name)_install_man="yes"

# Check for asciidoc and xmlto and don't build the docs if these are not installed.
AC_CHECK_PROG($(project.name)_have_asciidoc, asciidoc, yes, no)
AC_CHECK_PROG($(project.name)_have_xmlto, xmlto, yes, no)
if test "x$$(project.name)_have_asciidoc" = "xno" -o "x$$(project.name)_have_xmlto" = "xno"; then
    $(project.name)_build_doc="no"
    # Tarballs built with 'make dist' ship with prebuilt documentation.
    if ! test -f doc/$(project.name).7; then
        $(project.name)_install_man="no"
        AC_MSG_WARN([You are building an unreleased version of $(PROJECT.NAME) and asciidoc or xmlto are not installed.])
        AC_MSG_WARN([Documentation will not be built and manual pages will not be installed.])
    fi
fi
AC_MSG_CHECKING([whether to build documentation])
AC_MSG_RESULT([$$(project.name)_build_doc])
AC_MSG_CHECKING([whether to install manpages])
AC_MSG_RESULT([$$(project.name)_install_man])

# Set some default features required by $(project.libname) code.
CPPFLAGS="-D_REENTRANT -D_THREAD_SAFE $CPPFLAGS"

# OS-specific tests
case "${host_os}" in
    *linux*)
        # Define on Linux to enable all library features
        CPPFLAGS="-D_GNU_SOURCE -DLINUX $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_LINUX, 1, [Have Linux OS])

        case "${host_os}" in
            *android*)
                AC_DEFINE($(PROJECT.NAME)_HAVE_ANDROID, 1, [Have Android OS])
                $(project.name)_on_android="yes"
            ;;
        esac
        ;;
    *solaris*)
        # Define on Solaris to enable all library features
        CPPFLAGS="-D_PTHREADS $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_SOLARIS, 1, [Have Solaris OS])
        CFLAGS="${CFLAGS} -lsocket -lssp"
        ;;
    *freebsd*)
        # Define on FreeBSD to enable all library features
        CPPFLAGS="-D__BSD_VISIBLE $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        ;;
    *darwin*)
        # Define on Darwin to enable all library features
        CPPFLAGS="-D_DARWIN_C_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_OSX, 1, [Have DarwinOSX OS])
        ;;
    *netbsd*)
        # Define on NetBSD to enable all library features
        CPPFLAGS="-D_NETBSD_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_NETBSD, 1, [Have NetBSD OS])
        ;;
    *openbsd*)
        # Define on OpenBSD to enable all library features
        CPPFLAGS="-D_BSD_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        ;;
    *nto-qnx*)
        AC_DEFINE($(PROJECT.NAME)_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        ;;
    *aix*)
        AC_DEFINE($(PROJECT.NAME)_HAVE_AIX, 1, [Have AIX OS])
        ;;
    *hpux*)
        # Define on HP-UX to enable all library features
        CPPFLAGS="-D_POSIX_C_SOURCE=200112L"
        AC_DEFINE($(PROJECT.NAME)_HAVE_HPUX, 1, [Have HPUX OS])
        ;;
    *mingw32*)
        AC_DEFINE($(PROJECT.NAME)_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE($(PROJECT.NAME)_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        $(project.name)_on_mingw32="yes"
        $(project.name)_install_man="no"
        ;;
    *cygwin*)
        # Define on Cygwin to enable all library features
        CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.NAME)_HAVE_CYGWIN, 1, [Have Cygwin])
        $(project.name)_on_cygwin="yes"
        ;;
    *)
        AC_MSG_ERROR([unsupported system: ${host_os}.])
        ;;
esac

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h arpa/inet.h netinet/tcp.h netinet/in.h stddef.h \\
                 stdlib.h string.h sys/socket.h sys/time.h unistd.h \\
                 limits.h ifaddrs.h)
AC_CHECK_HEADERS([net/if.h net/if_media.h linux/wireless.h], [], [],
[
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
#include <stdint.h>
])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE
AC_C_BIGENDIAN

# These options are GNU compiler specific.
if test "x$GCC" = "xyes"; then
    CPPFLAGS="-pedantic -Werror -Wall -Wc++-compat ${CPPFLAGS}"
fi

AM_CONDITIONAL(ENABLE_SHARED, test "x$enable_shared" = "xyes")
AM_CONDITIONAL(ON_MINGW, test "x$$(project.name)_on_mingw32" = "xyes")
AM_CONDITIONAL(ON_CYGWIN, test "x$$(project.name)_on_cygwin" = "xyes")
AM_CONDITIONAL(ON_ANDROID, test "x$$(project.name)_on_android" = "xyes")
AM_CONDITIONAL(INSTALL_MAN, test "x$$(project.name)_install_man" = "xyes")
AM_CONDITIONAL(BUILD_DOC, test "x$$(project.name)_build_doc" = "xyes")

.for project.main
# Check for $(name) intent
AC_ARG_WITH([$(name)],
    AS_HELP_STRING([--with-$(name)],
.   if private ?= 1
        [Compile the $(name) program [default=yes].]),
.   else
        [Compile and install the $(name) program [default=yes].]),
.   endif
    [with_$(name)=$withval],
    [with_$(name)=yes])

AM_CONDITIONAL([WITH_$(NAME)], [test x$with_$(name) != xno])
AM_COND_IF([WITH_$(NAME)], [AC_MSG_NOTICE([WITH_$(NAME) defined])])

.endfor
# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(perror gettimeofday memset getifaddrs)
AC_CHECK_LIB([uuid], [uuid_generate])

# Set pkgconfigdir
AC_ARG_WITH([pkgconfigdir], AS_HELP_STRING([--with-pkgconfigdir=PATH],
    [Path to the pkgconfig directory [[LIBDIR/pkgconfig]]]),
    [pkgconfigdir="$withval"], [pkgconfigdir='${libdir}/pkgconfig'])
AC_SUBST([pkgconfigdir])

# Specify output files
.if count (class) + count (ac_config) > 0
AC_CONFIG_FILES([Makefile
.   if count (class) > 0
                 doc/Makefile
                 src/$(project.libname).pc
.   endif
.   for project.main where main.service ?= 1
                 src/$(main.name).service
.   endfor
                 ])
.else
AC_CONFIG_FILES([Makefile])
.endif
AC_OUTPUT

$(project.GENERATED_WARNING_HEADER:)
