{% set BUILD_DIR = "$CYLC_WORKFLOW_RUN_DIR/share/build"
{% set initial_cycle_point = initial_cycle_point | default('2000') %}
{% set final_cycle_point = final_cycle_point | default('') %}

[meta]
    description = """
        A datetime cycling workflow that builds and runs a model in a cyclic
        manner.
    """

[task parameters]
    diagnostic = land, air, water

[scheduling]
    initial cycle point = {{ initial_cycle_point }}
    final cycle point = {{ final_cycle_point }}
    runahead limit = P3D

    [[queues]]
        [[[housekeep]]]
            limit = 1
            members = housekeep

    [[special tasks]]
        clock-triggers = \
            fetch(-PT10M), \
            bc(PT0H)

    [[graph]]
        # startup
        R1 = """
            configure => build => install => run_model
            recon => bc?

            # fallback
            bc:fail? => bc2
        """

        # daily cycling
        P1D = """
            # wait for spin up
            bc[^]? | bc2[^] => fetch

            # run model and processing
            fetch => run_model => process<diagnostic> => housekeep

            # run_model depends on the previous two runs
            run_model[-P1D] => run_model
            run_model[-P2D] => run_model
        """

        # shutdown
        R1/$ = """
            run_model => report => archive => housekeep
        """

[runtime]
    [[configure]]
        script = """
            mkdir -p "{{ BUILD_DIR }}"
            src/configure "{{ BUILD_DIR }}"
        """

    [[build]]
        platform = hpc-bg  # build on login node (same arch)
        script = rose task-run --app-key=fcm_make

    [[install]]
        script = rsync "$SRC" "$DEST"
        [[[environment]]]
            SRC = {{ BUILD_DIR }}
            DEST = $CYLC_WORKFLOW_RUN_DIR/lib/build

    [[BC]]
        script = rose task-run --app-key=create_bc
        [[environment]]
            OROG = N34

    [[bc]]
        inherit = BC
        execution time limit = PT10M
        completion = succeeded or failed

    [[bc2]]
        # fallback if bc fails -> shortstep and force override
        inherit = BC
        execution time limit = PT15M
        [[[environment]]]
            SS = .true.
            FORCE = .true.

    [[HPC]]
        platform = hpc
        [[[directives]]]
            --nodes=32
            --mem-per-node=128Gb

    [[run_model]]
        inherit = HPC
        pre-script = eval $(rose task-env)
        script = rose task-run --debug
        err-script = model-debug  # only run if the task fails
        submission retry delays = 1*PT1M, 5*PT5M
        execution time limit = PT1H15M
        [[[environment]]]
            # strip time off of the cycle point for model use
            MODEL_TIME = $(isodatetime "${CYLC_TASK_CYCLE_POINT}" --format=CCYYMMDD)

    [[fetch]]
        pre-script = eval $(rose task-env)
        script = rose task-run
        execution retry delays = 1*PT1M, 2*PT5M, 5*PT10M

    [[<diagnostic>]]
        # family representing a model diagnostic
        [[[environment]]]
            DIAG = fcum_%(diagnostic)s

    [[process<diagnostic>]]
        inherit = <diagnostic>
        script = rose task-run

    [[process<diagnostic=air>]]
        # override the STASH code for the aircraft diagnostic
        [[[environment]]]
            STASH = a90d23a10e8500

    [[report]]
        script = make-report && mv report.html "${CYLC_WORKFLOW_SHARE_DIR}"

    [[archive]]
        script = rose task-run --app-key=rose_arch

    [[housekeep]]
        pre-script = eval $(rose task-env)
        script = rose task-run --app-key=rose_prune
