# Modified code sample from https://github.com/MetOffice/CSET/blob/main/cset-workflow/flow.cylc
# (Apache 2.0 license)

[meta]
title = CSET
description = Workflow for running CSET.
URL = https://metoffice.github.io/CSET

[scheduler]
    UTC mode = True

[scheduling]
    runahead limit = P{{CSET_RUNAHEAD_LIMIT}}
    initial cycle point = {{CSET_INITIAL_CYCLE_POINT}}
    final cycle point = {{CSET_FINAL_CYCLE_POINT}}

    [[graph]]
    # Only runs on the first cycle.
    R1/^ = """
    build_conda => install_website_skeleton
    build_conda => install_local_cset
    install_website_skeleton & install_local_cset => FETCH_DATA
    """

    # Only runs on the final cycle.
    R1/$ = """
    process_finish => COLLATE:succeed-all =>
    finish_website => send_email => housekeeping_full
    """

    # Runs every cycle to process the data in parallel.
    {{CSET_CYCLE_PERIOD}} = """
    install_website_skeleton[^] & install_local_cset[^] =>
    FETCH_DATA:succeed-all => PARALLEL:succeed-all =>
    process_finish => housekeeping_raw

    # Intercycle dependence with this task ensures the collate step waits for
    # the required data.
    process_finish[-{{CSET_CYCLE_PERIOD}}] => process_finish
    """

    {% if CSET_INCREMENTAL_OUTPUT %}
    # Runs every so often to update output plots during runtime.
    {{CSET_INCREMENTAL_OUTPUT_PERIOD}} = """
    COLLATE[-{{CSET_INCREMENTAL_OUTPUT_PERIOD}}]:finish-all &
    process_finish => COLLATE
    """
    {% endif %}

[runtime]
    [[root]]
    script = rose task-run -v
    execution time limit = PT15M
        [[[environment]]]
        CSET_ENV_USE_MODULES = {{CSET_ENV_USE_MODULES}}
        {% if CSET_ENV_USE_MODULES %}
        MODULES_LIST = {{MODULES_LIST}}
        MODULES_PURGE = {{MODULES_PURGE}}
        {% endif %}

        CSET_ENV_USE_CONDA = {{CSET_ENV_USE_CONDA}}
        {% if CSET_ENV_USE_CONDA %}
        CONDA_PATH = {{CONDA_PATH}}
        CONDA_VENV_LOCATION = {{CONDA_VENV_LOCATION}}
        {% endif %}

        CSET_ENV_SEPARATE_MET = {{CSET_ENV_SEPARATE_MET}}
        {% if CSET_ENV_SEPARATE_MET %}
        CONDA_METPLUS_VENV_LOCATION = {{CONDA_METPLUS_VENV_LOCATION}}
        MET_INSTALL_DIR = {{MET_INSTALL_DIR}}
        MET_BUILD_BASE = {{MET_BUILD_BASE}}
        METPLUS_BASE = {{METPLUS_BASE}}
        MET_LIBRARIES = {{MET_LIBRARIES}}
        {% endif %}

        LOGLEVEL = {{LOGLEVEL}}
        WEB_DIR = {{WEB_DIR}}
        COLORBAR_FILE = {{COLORBAR_FILE}}

    [[PARALLEL]]
    script = rose task-run -v --app-key=run_cset_recipe
    [[[environment]]]
        CSET_BAKE_MODE = parallel

    [[COLLATE]]
    script = rose task-run -v --app-key=run_cset_recipe
    [[[environment]]]
        CSET_BAKE_MODE = collate

    [[FETCH_DATA]]

    [[process_finish]]
    # Dummy task needed for workflow scheduling.
    script = true
    platform = localhost

    [[build_conda]]
    # Create the conda environment if it does not yet exist.
    execution time limit = PT30M
        [[[environment]]]
        CONDA_VENV_CREATE = {{CONDA_VENV_CREATE}}

    [[install_local_cset]]
    # Install CSET from source.
    execution time limit = PT5M
        [[[environment]]]
        CSET_ENV_USE_LOCAL_CSET = {{CSET_ENV_USE_LOCAL_CSET}}
        {% if CSET_ENV_USE_LOCAL_CSET %}
        CSET_LOCAL_CSET_PATH = {{CSET_LOCAL_CSET_PATH}}
        {% endif %}

    [[install_website_skeleton]]
    # Copies the static files that make up the web interface.
        [[[environment]]]
        CLEAN_WEB_DIR = {{CLEAN_WEB_DIR}}

    [[fetch_fcst]]
    # Fetch data from disk or a file based archival system.
    inherit = FETCH_DATA
        [[[environment]]]
        ROSE_APP_OPT_CONF_KEYS = {{FETCH_FCST_OPT_CONF}}
        CSET_INPUT_FILE_PATH = {{CSET_INPUT_FILE_PATH}}
        {% if CSET_INCREMENTAL_DATA_FETCH %}
        CSET_FILE_NAME_METADATA_PATTERN = {{CSET_FILE_NAME_METADATA_PATTERN}}
        CSET_CYCLE_PERIOD = {{CSET_CYCLE_PERIOD}}
        CSET_TIMES_PER_FILE = {{CSET_TIMES_PER_FILE}}
        CSET_FILE_TIME_OFFSET = {{CSET_FILE_TIME_OFFSET}}
        {% endif %}

    [[housekeeping_raw]]
    # Housekeep unprocessed data files.
    script = rose task-run -v --app-key=housekeeping
        [[[environment]]]
        HOUSEKEEPING_MODE = {{[HOUSEKEEPING_MODE, 1]|min}}

    [[housekeeping_full]]
    # Housekeep processed intermediate files too.
    script = rose task-run -v --app-key=housekeeping
        [[[environment]]]
        HOUSEKEEPING_MODE = {{[HOUSEKEEPING_MODE, 2]|min}}

    [[finish_website]]
    # Updates the workflow info in the web interface.
    platform = localhost

    [[send_email]]
    # Send email to notify that the workflow is complete.
    platform = localhost
        [[[environment]]]
        WEB_ADDR = {{WEB_ADDR}}


# Include files bring their own graph and runtime sections.
{% for include_file in glob("includes/*.cylc") %}
{% include include_file %}
{% endfor %}

{# Site-specific details that add to (or override) the core suite definition #}
{% include 'site/' ~ SITE ~ '.cylc' %}
