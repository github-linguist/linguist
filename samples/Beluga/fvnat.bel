--nostrengthen

tp: type.
nat: tp.
bool: tp.
arr : tp -> tp -> tp.


exp : tp -> type.
z   : exp nat.
suc : exp nat -> exp nat.
andalso : exp bool -> exp bool -> exp bool.
tt  : exp bool.
ff  : exp bool.

app:  exp (arr T T') -> exp T -> exp T'.
lam : (exp T -> exp T') -> exp (arr T T').

opt: type.
nothing: opt.
something: exp T -> opt.

schema w = some [t:tp] exp t;

rec free_var : {g:w} [g |- exp T] -> [g |- opt] =
/ total e (free_var g t e)/
mlam g  => % mlam T  =>
 fn e =>
 case e of
  [g |- z]         => [g |- nothing]
| [g |- tt]        => [g |- nothing]
| [g |- ff]        => [g |- nothing]

| [g |- (#p)]    => [g |- something  (#p)]

| [g |- suc U] => free_var [g] [g |- U]

| [g |- andalso U V]  =>
  (case free_var [g] [g |- U] of
     [g |- nothing]   => free_var [g] [g |- V]
%   | [g] something  (#p)  => [g] something  (#p)
    | [g |- something U]     => [g |- something (U )]
  )

| [g |- app U V]  =>
    (case free_var [g] [g |- U] of
       [g |- nothing]   => free_var [g] [g |- V]
%     | [g] something  (#p)  => [g] something  (#p)
     | [g |- something U]     => [g |- something (U )])

| [g |- lam (\x . U)] =>

   (case (free_var [g, x:exp _ ] [g, x |-  U]) of
      [g, x: exp _  |-  nothing]       => [g |- nothing]
    | [g, x: exp _  |-  something x]   => [g |- nothing]
           % technically we need to initiate backtracking
 %   | [g, x: exp _ ] something (#p) => [g] something (#p)
    | [g, x: exp _  |-  something (U[..] )]  => [g |- something U]
    | [g, x: exp _  |-  something U]  => [g |- nothing]
   )
;


