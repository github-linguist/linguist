
nat :  type.     --name nat N x.
z : nat.
s : nat -> nat.


rec plus : [ |- nat] -> [ |- nat] -> [ |- nat] =  
 / total x (plus x y) /
fn x => fn y =>  case x of
| [ |- z]  => y
| [ |- s U]  => 
 let [ |- V] = plus [ |- U ] y in
    [ |- s V]
;


rec plus' : [ |- nat] -> [ |- nat] -> [ |- nat] = 
/ total x (plus' x ) / 
fn x => case x of
| [ |- z]  => (fn y => y)
| [ |- s U] =>
  fn y =>
   let [ |- V] = plus' [ |- U] y in
     [ |- s V]
;


rec mult : [ |- nat] -> [ |- nat] -> [ |- nat] = 
/ total x (mult x y) / 
fn x => fn y =>  case x of
| [ |- z]  => y
| [ |- s U]  =>
  let [ |- V] = mult [ |- U ] y  in
    plus [ |- V] y
;


rec mult' : [ |- nat] -> [ |- nat] -> [ |- nat] = 
/ total x (mult' x) / 
fn x => case x of
| [ |- z] => fn y => [ |- z]
| [ |- s U] =>
  fn y =>
  let [ |- V] = mult' [ |- U] y in
    plus [ |- V] y
;

rec fact : [ |- nat] -> [ |- nat] =
/ total x (fact x) /
fn x => case x of
| [ |- z] => [ |- s z]
| [ |- s U] =>
  let [ |- V] = fact [ |- U]  in
     mult [ |- V] x
;

let x = plus [ |- z] [ |- s z];
let y = fact [ |- s (s z)];
let w = fact [ |- s (s (s z))];




