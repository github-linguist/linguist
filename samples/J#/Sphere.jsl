package core;

public class Sphere
{
	public enum Reflection_t { DIFFUSE, SPECULAR, REFRACTIVE };

	public static final double EPSILON_SPHERE = 1e-4;

	public double r;
	public Vector3 p;
	public Vector3 e;
	public Vector3 f;
	public Reflection_t reflection_t;

	public Sphere(double r, Vector3 p, Vector3 e, Vector3 f, Reflection_t reflection_t)
	{
		this.r = r;
		this.p = (Vector3)p.clone();
		this.e = (Vector3)e.clone();
		this.f = (Vector3)f.clone();
		this.reflection_t = reflection_t;
	}

	public boolean intersect(Ray ray)
	{
		// (o + t*d - p) . (o + t*d - p) - r*r = 0
		// <=> (d . d) * t^2 + 2 * d . (o - p) * t + (o - p) . (o - p) - r*r = 0
		// 
		// Discriminant check
		// (2 * d . (o - p))^2 - 4 * (d . d) * ((o - p) . (o - p) - r*r) <? 0
		// <=> (d . (o - p))^2 - (d . d) * ((o - p) . (o - p) - r*r) <? 0
		// <=> (d . op)^2 - 1 * (op . op - r*r) <? 0
		// <=> b^2 - (op . op) + r*r <? 0
		// <=> D <? 0
		//
		// Solutions
		// t = (- 2 * d . (o - p) +- 2 * sqrt(D)) / (2 * (d . d))
		// <=> t = dop +- sqrt(D)

		final Vector3 op = Vector3.sub(p, ray.o);
		final double dop = ray.d.dot(op);
		final double D = dop * dop - op.dot(op) + r * r;

		if (D < 0)
			return false;

		final double sqrtD = Math.sqrt(D);

		final double tmin = dop - sqrtD;
		if (ray.tmin < tmin && tmin < ray.tmax)
		{
			ray.tmax = tmin;
			return true;
		}

		final double tmax = dop + sqrtD;
		if (ray.tmin < tmax && tmax < ray.tmax)
		{
			ray.tmax = tmax;
			return true;
		}

		return false;
	}
}
