/*
 * Title               : crypt
 * Last modified date  : 24.07.2018
 * Author              : jumation.com. Based on Crypt::Juniper Perl module by
 *                       Kevin Brintnall.
 * Description         : Encrypts/decrypts Juniper type $9$ secrets.
 * Options             : "encrypt" - Encrypts plain-text to Juniper type $9$
 *                       secret which can be used in Juniper configuration.
 *                       Example: "op crypt encrypt foo"
 *                       "decrypt" - Decrypts Juniper type $9$ secret to plain-
 *                       text. Example: "op crypt decrypt $9$ReqcyKY2aHqf"
 * Notes               : Requires Junos 12.2 or newer because the script is
 *                       written in SLAX 1.1.
 *                       In case plain-text password contains punctuation
 *                       characters like ', ", \ or plain-text secret should
 *                       not be logged, then it is better to use interactive
 *                       mode("op crypt").
 *                       In SLAX version 1.1 the terminate statement does not
 *                       work correctly in while loop. Instead of exiting the
 *                       script, the terminate statement immediately starts the
 *                       next iteration of while loop if while expression
 *                       returns true and this loops infinitely. Thus, a work-
 *                       around is used which makes sure, that while loop
 *                       expression returns false if script needs to be termi-
 *                       nated.
 */

version 1.1;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns math = "http://exslt.org/math";
ns exsl = "http://exslt.org/common";
ns jumation = "https://www.jumation.com/slaxfunctions";

import "../import/junos.xsl";


var $arguments = {
	<argument> {
		<name> "encrypt";
		<description> 'Encrypt plain-text to Juniper type $9$ secret';
	}
	<argument> {
		<name> "salt";
		<description> 'Optional salt for encrypt function';
	}
	<argument> {
		<name> "decrypt";
		<description> 'Decrypt Juniper type $9$ secret to plain-text';
	}
}


param $encrypt;
param $salt;
param $decrypt;


var $extra := {
	<extra key="Q"> 3;
	<extra key="z"> 3;
	<extra key="F"> 3;
	<extra key="3"> 3;
	<extra key="n"> 3;
	<extra key="6"> 3;
	<extra key="/"> 3;
	<extra key="9"> 3;
	<extra key="C"> 3;
	<extra key="A"> 3;
	<extra key="t"> 3;
	<extra key="p"> 3;
	<extra key="u"> 3;
	<extra key="0"> 3;
	<extra key="O"> 3;
	<extra key="B"> 2;
	<extra key="1"> 2;
	<extra key="I"> 2;
	<extra key="R"> 2;
	<extra key="E"> 2;
	<extra key="h"> 2;
	<extra key="c"> 2;
	<extra key="S"> 2;
	<extra key="y"> 2;
	<extra key="r"> 2;
	<extra key="l"> 2;
	<extra key="e"> 2;
	<extra key="K"> 2;
	<extra key="v"> 2;
	<extra key="M"> 2;
	<extra key="W"> 2;
	<extra key="8"> 2;
	<extra key="L"> 2;
	<extra key="X"> 2;
	<extra key="x"> 2;
	<extra key="7"> 1;
	<extra key="N"> 1;
	<extra key="-"> 1;
	<extra key="d"> 1;
	<extra key="V"> 1;
	<extra key="b"> 1;
	<extra key="w"> 1;
	<extra key="s"> 1;
	<extra key="Y"> 1;
	<extra key="2"> 1;
	<extra key="g"> 1;
	<extra key="4"> 1;
	<extra key="o"> 1;
	<extra key="a"> 1;
	<extra key="J"> 1;
	<extra key="Z"> 1;
	<extra key="G"> 1;
	<extra key="U"> 1;
	<extra key="D"> 1;
	<extra key="j"> 1;
	<extra key="i"> 0;
	<extra key="H"> 0;
	<extra key="k"> 0;
	<extra key="q"> 0;
	<extra key="."> 0;
	<extra key="m"> 0;
	<extra key="P"> 0;
	<extra key="f"> 0;
	<extra key="5"> 0;
	<extra key="T"> 0;
}

var $encoding := {
	<encoding key="0"> {
		<n> 1;
		<n> 4;
		<n> 32;
	}
	<encoding key="1"> {
		<n> 1;
		<n> 16;
		<n> 32;
	}
	<encoding key="2"> {
		<n> 1;
		<n> 8;
		<n> 32;
	}
	<encoding key="3"> {
		<n> 1;
		<n> 64;
	}
	<encoding key="4"> {
		<n> 1;
		<n> 32;
	}
	<encoding key="5"> {
		<n> 1;
		<n> 4;
		<n> 16;
		<n> 128;
	}
	<encoding key="6"> {
		<n> 1;
		<n> 32;
		<n> 64;
	}
}


var $alpha_num := {
	<alpha_num key="Q"> 0;
	<alpha_num key="z"> 1;
	<alpha_num key="F"> 2;
	<alpha_num key="3"> 3;
	<alpha_num key="n"> 4;
	<alpha_num key="6"> 5;
	<alpha_num key="/"> 6;
	<alpha_num key="9"> 7;
	<alpha_num key="C"> 8;
	<alpha_num key="A"> 9;
	<alpha_num key="t"> 10;
	<alpha_num key="p"> 11;
	<alpha_num key="u"> 12;
	<alpha_num key="0"> 13;
	<alpha_num key="O"> 14;
	<alpha_num key="B"> 15;
	<alpha_num key="1"> 16;
	<alpha_num key="I"> 17;
	<alpha_num key="R"> 18;
	<alpha_num key="E"> 19;
	<alpha_num key="h"> 20;
	<alpha_num key="c"> 21;
	<alpha_num key="S"> 22;
	<alpha_num key="y"> 23;
	<alpha_num key="r"> 24;
	<alpha_num key="l"> 25;
	<alpha_num key="e"> 26;
	<alpha_num key="K"> 27;
	<alpha_num key="v"> 28;
	<alpha_num key="M"> 29;
	<alpha_num key="W"> 30;
	<alpha_num key="8"> 31;
	<alpha_num key="L"> 32;
	<alpha_num key="X"> 33;
	<alpha_num key="x"> 34;
	<alpha_num key="7"> 35;
	<alpha_num key="N"> 36;
	<alpha_num key="-"> 37;
	<alpha_num key="d"> 38;
	<alpha_num key="V"> 39;
	<alpha_num key="b"> 40;
	<alpha_num key="w"> 41;
	<alpha_num key="s"> 42;
	<alpha_num key="Y"> 43;
	<alpha_num key="2"> 44;
	<alpha_num key="g"> 45;
	<alpha_num key="4"> 46;
	<alpha_num key="o"> 47;
	<alpha_num key="a"> 48;
	<alpha_num key="J"> 49;
	<alpha_num key="Z"> 50;
	<alpha_num key="G"> 51;
	<alpha_num key="U"> 52;
	<alpha_num key="D"> 53;
	<alpha_num key="j"> 54;
	<alpha_num key="i"> 55;
	<alpha_num key="H"> 56;
	<alpha_num key="k"> 57;
	<alpha_num key="q"> 58;
	<alpha_num key="."> 59;
	<alpha_num key="m"> 60;
	<alpha_num key="P"> 61;
	<alpha_num key="f"> 62;
	<alpha_num key="5"> 63;
	<alpha_num key="T"> 64;
}


/* Printable ASCII characters. */
var $ascii := {
	<extra key="32"> ' ';
	<extra key="33"> '!';
	<extra key="34"> '"';
	<extra key="35"> '#';
	<extra key="36"> '$';
	<extra key="37"> '%';
	<extra key="38"> '&';
	<extra key="39"> "'";
	<extra key="40"> '(';
	<extra key="41"> ')';
	<extra key="42"> '*';
	<extra key="43"> '+';
	<extra key="44"> ',';
	<extra key="45"> '-';
	<extra key="46"> '.';
	<extra key="47"> '/';
	<extra key="48"> '0';
	<extra key="49"> '1';
	<extra key="50"> '2';
	<extra key="51"> '3';
	<extra key="52"> '4';
	<extra key="53"> '5';
	<extra key="54"> '6';
	<extra key="55"> '7';
	<extra key="56"> '8';
	<extra key="57"> '9';
	<extra key="58"> ':';
	<extra key="59"> ';';
	<extra key="60"> '<';
	<extra key="61"> '=';
	<extra key="62"> '>';
	<extra key="63"> '?';
	<extra key="64"> '@';
	<extra key="65"> 'A';
	<extra key="66"> 'B';
	<extra key="67"> 'C';
	<extra key="68"> 'D';
	<extra key="69"> 'E';
	<extra key="70"> 'F';
	<extra key="71"> 'G';
	<extra key="72"> 'H';
	<extra key="73"> 'I';
	<extra key="74"> 'J';
	<extra key="75"> 'K';
	<extra key="76"> 'L';
	<extra key="77"> 'M';
	<extra key="78"> 'N';
	<extra key="79"> 'O';
	<extra key="80"> 'P';
	<extra key="81"> 'Q';
	<extra key="82"> 'R';
	<extra key="83"> 'S';
	<extra key="84"> 'T';
	<extra key="85"> 'U';
	<extra key="86"> 'V';
	<extra key="87"> 'W';
	<extra key="88"> 'X';
	<extra key="89"> 'Y';
	<extra key="90"> 'Z';
	<extra key="91"> '[';
	<extra key="92"> '\\';
	<extra key="93"> ']';
	<extra key="94"> '^';
	<extra key="95"> '_';
	<extra key="96"> '`';
	<extra key="97"> 'a';
	<extra key="98"> 'b';
	<extra key="99"> 'c';
	<extra key="100"> 'd';
	<extra key="101"> 'e';
	<extra key="102"> 'f';
	<extra key="103"> 'g';
	<extra key="104"> 'h';
	<extra key="105"> 'i';
	<extra key="106"> 'j';
	<extra key="107"> 'k';
	<extra key="108"> 'l';
	<extra key="109"> 'm';
	<extra key="110"> 'n';
	<extra key="111"> 'o';
	<extra key="112"> 'p';
	<extra key="113"> 'q';
	<extra key="114"> 'r';
	<extra key="115"> 's';
	<extra key="116"> 't';
	<extra key="117"> 'u';
	<extra key="118"> 'v';
	<extra key="119"> 'w';
	<extra key="120"> 'x';
	<extra key="121"> 'y';
	<extra key="122"> 'z';
	<extra key="123"> '{';
	<extra key="124"> '|';
	<extra key="125"> '}';
	<extra key="126"> '~';
}


function jumation:nibble($chars, $len) {

	var $nib = substring($chars, 1, $len);

	if ( not( string-length($nib) == $len ) ) {
		result number(string-length($nib));
	}
	else {
		result $nib;
	}

}


function jumation:gap($prev, $cur) {

	var $diff = $alpha_num/alpha_num[@* == $cur] -
				$alpha_num/alpha_num[@* == $prev];

	if ($diff < 0 ) {
		result 65 - math:abs($diff) mod 65 - 1;
	}
	else {
		result $diff mod 65 - 1;
	}

}


function jumation:gap-decode($gaps, $decode) {

	if ( count($gaps/n) != count($decode/n) ) {
		result "";
	}
	else {

		mvar $num;
		set $num = 0;
		for $i( 1 ... count($gaps/n) ) {
			set $num = $num +
						$gaps/n[position() == $i] * $decode/n[position() == $i];
		}

		result $num mod 256;
	}

}


function jumation:randc($cnt) {

	mvar $count;
	set $count = {
		if ( $cnt ) {
			expr $cnt;
		}
		else {
			expr 0;
		}
	}

	var $an_cnt = count($alpha_num/alpha_num) - 1;

	mvar $r;
	set $r = "";

	while ( $count > 0 ) {

		/*
		 * Variable rand_nr will be random integer from 0 to 63 (inclusive
		 * on both ends of the range).
		 * The math:random() function returns a random number with a
		 * minimum value of 0 and a maximum value of 1. Implementation
		 * details for math:random() can be found here:
		 * https://github.com/GNOME/libxslt/blob/master/libexslt/math.c
		 */
		var $rand_nr = (floor(math:random() * $an_cnt) mod $an_cnt);

		set $r = $r _ string($alpha_num/alpha_num[. == $rand_nr]/@key);

		set $count = $count - 1;
	}

	result $r;

}


function jumation:gap-encode($p, $prev, $encode) {

	mvar $ascii_dec;
	set $ascii_dec = {
		if ( $p ) {
			expr $ascii/extra[. == $p]/@key;
		}
		else {
			expr 0;
		}
	}

	mvar $previous;
	set $previous = $prev;

	mvar $crypt;

	mvar $gaps;

	mvar $gap;
	set $gap = 0;

	for-each (jumation:reverse($encode/encoding/n)/n) {

		append $gaps += {
			<n> floor($ascii_dec div .);
		}
		set $ascii_dec = $ascii_dec mod .;

	}

	for-each (jumation:reverse($gaps/n)/n) {

		set $gap = . + $alpha_num/alpha_num[@* == $previous] + 1;
		var $n = $gap mod count($alpha_num/alpha_num);
		set $previous = $alpha_num/alpha_num[. == $n]/@key;
		set $crypt = $crypt _ $previous;

	}

	result $crypt;
}


/* Reverse the order of node-set elements. */
function jumation:reverse($node-set) {

	mvar $rev;
	append $rev += $node-set[last()];

	for $i( 1 ... count($node-set) - 1 ) {
		append $rev += $node-set[last() - $i];
	}

	result $rev;
}


template decrypt($decrypt) {

	/*
	 * POSIX ERE format.
	 * Double-escaping is needed because the SLAX to XSLT
	 * conversion will remove one of the backslashes.
	 */
	var $pattern = "^\\$9\\$[-/.[:alnum:]]{4,}$";
	if ( not( jcs:regex( $pattern, $decrypt ) ) ) {
		terminate 'Invalid Juniper crypt string!';
	}

	mvar $chars;
	set $chars = jcs:split("^\\$9\\$", $decrypt);
	set $chars = string($chars[2]);

	mvar $len;
	set $len = 1;


	var $first = jumation:nibble($chars, $len);

	if ( exsl:object-type($first) == "number" ) {
		terminate 'Ran out of characters: hit ' _
		string-length($first) _ ', expecting ' _ $len _ ' chars';
	}
	set $chars = substring-after($chars, $first);


	set $len = $extra/extra[@* == $first];


	var $x = jumation:nibble($chars, $len);

	if ( exsl:object-type($x) == "number" ) {
		terminate 'Ran out of characters: hit ' _
		string-length($x) _ ', expecting ' _ $len _ ' chars';
	}
	set $chars = substring-after($chars, $x);


	mvar $prev;
	set $prev = $first;

	mvar $decrypt;

	while ( $chars ) {

		mvar $dlen = string-length($decrypt) mod count($encoding/encoding);

		/*
		 * Variable decode will hold a node-set containing the child nodes
		 * of one of the seven encoding element nodes. Example:
		 *
		 * (sdb) print $decode
		 * [node-set] (1) rtf-doc
		 * <n>1</n>
		 * <n>4</n>
		 * <n>32</n>
		 * (sdb)
		 *
		 */
		mvar $decode;
		append $decode += $encoding/encoding[@* == $dlen]/n;

		set $len = count($decode/n);

		mvar $nibble;
		set $nibble = jumation:nibble($chars, $len);

		if ( exsl:object-type($nibble) == "number" ) {
			set $chars = "";
			terminate 'Ran out of characters: hit ' _
			string-length($nibble) _ ', expecting ' _ $len _ ' chars';
		}
		set $chars = substring-after($chars, $nibble);

		/*
		 * Variable gaps will hold a node-set containing distances(positive
		 * integers) between characters. Example:
		 *
		 * (sdb) print $gaps
		 * [node-set] (1) rtf-doc
		 * <n>3</n>
		 * <n>0</n>
		 * <n>3</n>
		 * (sdb)
		 *
		 */
		mvar $cur;
		mvar $gaps;
		append $gaps += {
			while ( $nibble ) {
				set $cur = substring($nibble, 1, 1);
				set $nibble = substring-after($nibble, $cur);
				<n> jumation:gap($prev, $cur);
				set $prev = $cur;
			}
		}


		var $key = jumation:gap-decode($gaps, $decode);
		if ( exsl:object-type($key) == "string" ) {
			set $chars = "";
			terminate 'Nibble and decode size not the same!';
		}
		set $decrypt = $decrypt _ $ascii/extra[@* == $key];
	}

	<output> $decrypt;

}


template encrypt($encrypt, $salt) {

	mvar $plain;
	set $plain = $encrypt;

	var $s = {
		if ( $salt ) {
			expr $salt;
		}
		else {
			expr jumation:randc(1);
		}
	}

	var $pattern = "^[-/.[:alnum:]]$";
	if ( not( jcs:regex( $pattern, $s ) ) ) {
		terminate 'Salt has to be single character from [-/.0-9A-Za-z]';
	}

	var $rand = jumation:randc($extra/extra[@* == $s]);

	mvar $pos;
	set $pos = 0;

	mvar $prev;
	set $prev = $s;

	mvar $crypt;
	set $crypt = "$9$" _ $s _ $rand;

	mvar $p;

	while ( $plain ) {

		set $p = substring($plain, 1, 1);
		set $plain = substring-after($plain, $p);

		mvar $dlen = $pos mod count($encoding/encoding);

		mvar $encode;
		append $encode += $encoding/encoding[@* == $dlen];

		set $crypt = $crypt _ jumation:gap-encode($p, $prev, $encode);


		set $prev = substring($crypt, string-length($crypt), 1);

		set $pos = $pos + 1;
	}

	<output> $crypt;
}


match / {
	<op-script-results> {

		if ( not($decrypt) && not($encrypt) ) {
			var $prompt = "\n*** Interactive mode of crypt ***\n\n" _
						  "Please select decrypt[1] or encrypt[2] mode: ";

			var $answer =  jcs:get-input( $prompt );

			if ( $answer == "1" || $answer == "decrypt" ) {
				var $prompt_d = "\nEnter the Juniper type $9$ secret: ";
				var $decrypt =  jcs:get-input( $prompt_d );
				call decrypt($decrypt);
			}
			else if ( $answer == "2" || $answer == "encrypt" ) {
				var $prompt_e = "\nEnter the plain text secret" _
								"(input is hidden): ";
				var $encrypt =  jcs:get-secret( $prompt_e );
				var $prompt_es = "\nEnter the salt(leave empty for random): ";
				var $salt = jcs:get-input( $prompt_es );

				if ( jcs:empty($salt) ) {
					call encrypt($encrypt);
				}
				else {
					call encrypt($encrypt, $salt);
				}

			}
			else {
				terminate 'Please enter "1" or "2"';
			}
		}

		if ( $salt && not($encrypt) ) {
			terminate 'Salt is an optional argument for "encrypt"';
		}

		if ( $encrypt ) {
			if ( $decrypt ) {
				terminate 'Please use either "encrypt" or "decrypt" argument';
			}
			else if ( $salt ) {
				call encrypt($encrypt, $salt);
			}
			else {
				call encrypt($encrypt);
			}
		}

		if ( $decrypt ) {
			call decrypt($decrypt);
		}

	}
}
