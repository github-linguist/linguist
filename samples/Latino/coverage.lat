escribir("--------------------------------------------------------")
escribir("test coverage para variables")
escribir("--------------------------------------------------------")
l=cierto
escribir(l)
e=10
escribir(e)
d=1.5
escribir(d)
s="hola latino"
escribir(s)
s='ahora esta es una literal "hola latino"'
escribir(s)
PI=3.1416
escribir(PI)

escribir("--------------------------------------------------------")
escribir("test coverage para expresiones")
escribir("--------------------------------------------------------")
i = 1
d = 10.05

escribir("sumar---------------------------------------------------")
#entero + entero
escribir(i + i)  #a 1 se le suma 1 da como resultado 2

#entero + decimal
escribir(i + d) #a 1 se le suma 10.05 da como resultado 11.05

#decimal + entero
escribir(d + i) #da como resultado el decimal 11.05

#decimal + decimal
escribir(d + d) #da como resultado el decimal 20.1

escribir("restar--------------------------------------------------")
#entero - entero
escribir(i - (-1))  #a 1 se le resta -1 da como resultado 2

#entero - decimal
escribir(i - d) #a 1 se le suma 10.05 da como resultado -9.05

#decimal - entero
escribir(d - i) #da como resultado el decimal 9.05

#decimal - decimal
escribir(d - 0.05) #da como resultado el decimal 10

escribir("multiplicar---------------------------------------------")
#entero * entero
escribir(i * i) #da como resultado el decimal 1

#entero * decimal
escribir(i * d) #da como resultado el decimal 10.05

#decimal * entero
escribir(d * i) #da como resultado el decimal 10.05

#decimal * decimal
escribir(d * 0.5) #da como resultado el decimal 5.025

escribir("dividir-------------------------------------------------")
#entero / entero
escribir(i / i) #da como resultado el entero 1

#entero / decimal
escribir(i / d) #da como resultado el decimal 0.099502487562189

#decimal / entero
escribir(d / i) #da como resultado el entero 10

#decimal / decimal
escribir(d / 0.5) #da como resultado el decimal 20.1

escribir("modulo--------------------------------------------------")
#entero % entero
escribir(i % i) #da como resultado el entero 0

i = 21
#entero % decimal
escribir(i % d) #da como resultado el entero 1

escribir("--------------------------------------------------------")
escribir("test coverage para operadores de comparacion")
escribir("--------------------------------------------------------")
l = verdadero
e = 10
d = 3.14
lit = 'esto es una "literal"'
cad = "esto es una 'cadena'"
#comparador de negacion !
escribir("comparador de negacion !")
escribir("no falso: " . !falso)
#escribir(" no falso: " . !falso)
escribir("no verdadero: " . !verdadero)
#comparador de igualdad ==
escribir("comparador de igualdad ==")
escribir(l . " == falso: " . l == falso)
escribir(e . " == 10: " . e == 10)
escribir(d . " == 3.0: " . d == 3.0)
escribir(lit . " == 'hola': " . lit == 'hola')
escribir(cad . " == esto es una 'cadena': " . cad == "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador de desigualdad !=
escribir("comparador de desigualdad !=")
escribir(l . " != falso: " . l != falso)
escribir(e . " != 10: " . e != 10)
escribir(d . " != 3.0: " . d != 3.0)
escribir(lit . " != 'hola': " . lit != 'hola')
escribir(cad . " != esto es una 'cadena': " . cad != "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor que <
escribir("comparador menor que <")
escribir(e . " < 10: " . e < 10)
escribir(d . " < 3.0: " . d < 3.0)
escribir(lit . " < 'hola': " . lit < 'hola')
escribir(cad . " < esto es una 'cadena': " . cad < "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor que >
escribir("comparador mayor que >")
escribir(e . " > 10: " . e > 10)
escribir(d . " > 3.0: " . d > 3.0)
escribir(lit . " > 'hola': " . lit > 'hola')
escribir(cad . " > esto es una 'cadena': " . cad > "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor igual que <=
escribir("comparador menor igual que <=")
escribir(e . " <= 10: " . e <= 10)
escribir(d . " <= 3.0: " . d <= 3.0)
escribir(lit . " <= 'hola': " . lit <= 'hola')
escribir(cad . " <= esto es una 'cadena': " . cad <= "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor igual que >=
escribir("comparador mayor igual que >=")
escribir(e . " >= 10: " . e >= 10)
escribir(d . " >= 3.0: " . d >= 3.0)
escribir(lit . " >= 'hola': " . lit >= 'hola')
escribir(cad . " >= esto es una 'cadena': " . cad >= "esto es una 'cadena'")

escribir("--------------------------------------------------------")
escribir("test coverage para operadores logicos")
escribir("--------------------------------------------------------")
v = verdadero
f = falso
#&& y (and) logico
escribir("&& y (and) logico")
escribir("falso y falso: " . f && f)
escribir("verdadero y falso: " . v && f)
escribir("falso y verdadero: " . f && v)
escribir("verdadero y verdadero: " . v && v)

#|| o (or) logico
escribir("=============================")
escribir("|| o (or) logico")
escribir("falso o falso: " . f || f)
escribir("verdadero o falso: " . v || f)
escribir("falso o verdadero: " . f || v)
escribir("verdadero o verdadero: " . v || v)

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia si")
escribir("--------------------------------------------------------")
num = 10
si num < 0
    escribir("es negativo")
sino
    escribir("es positivo")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia elegir")
escribir("--------------------------------------------------------")
c = 'a'
## multiples casos con opcion defecto
elegir(c)
caso 'x':
    escribir("c vale x")
caso 'a':
    escribir("c vale a")
caso 'z':
    escribir("c vale z")
defecto:
    escribir("default")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia mientras")
escribir("--------------------------------------------------------")
i = 0
mientras i < 10
    escribir(i)
    i++     #esto es lo mismo que i = i + 1
fin

escribir("tablas de multiplicar")
i=1
mientras i<=10
  j=1
  mientras j<=10
    escribir(i . " X " . j . " = " . i*j)
    j++
  fin
  i++
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia hacer")
escribir("--------------------------------------------------------")
i = 0
hacer
    escribir(i)
    i++
cuando i < 10

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia desde")
escribir("--------------------------------------------------------")
escribir("del 1 al 10:")
desde(i=1; i<=10; i++)
    escribir(i)
fin
escribir("escribir de dos en dos descendente")
desde(i=10; i>0; i=i-2)
    escribir(i)
fin

escribir("--------------------------------------------------------")
escribir("test coverage para funciones")
escribir("--------------------------------------------------------")
funcion promedio(a,b)
    retorno (a+b)/2
fin

funcion max(a,b)
    si (a > b)
        retorno a
    sino
        retorno b
    fin
fin

funcion min(a,b)
    si (a < b)
        retorno a
    sino
        retorno b
    fin
fin

escribir("promedio de 3 y 5: " . promedio(3, 5)) #4
escribir("maximo de 3 y 5: " . max(3, 5)) #5
escribir("minimo de 3 y 5: " . min(3, 5)) #3

escribir("--------------------------------------------------------")
escribir("test coverage para escritura / lectura de archivos")
escribir("--------------------------------------------------------")

s = "funcion sumatoria(a, b)
  retorno (a + b)
fin"
escribir_archivo("modulo.lat", s)

s = leer_archivo("modulo.lat")
escribir(s)

####################################################################
#test coverage para "incluir"
####################################################################
incluir("modulo")
r = sumatoria(2, 3)
escribir(r)
