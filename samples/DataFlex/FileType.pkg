// BSD 3-Clause License
//
// Copyright (c) 2025, Data Access Europe B.V.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Interface for libmagic DLL. This DLL has functionality to get the true MIME type of a file.
// Note: Along with libmagic.dll, magic.mgc must be present in the same folder (Programs folder of the application).
// Sources : https://github.com/julian-r/file-windows/releases
// See also: https://github.com/file/file/blob/b92eed41b1bc0739c5c5d70c444e0c574429321b/src/magic.h.in
//           https://gist.github.com/vivithemage/9489378
//  MIT License
//
//  Copyright (c) 2017 Julian David Rath
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to Use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to Do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in All
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE is PROVIDED "AS IS", WITHOUT WARRANTY of ANY KIND, EXPRESS or
//  IMPLIED, INCLUDING BUT not LIMITED to THE WARRANTIES of MERCHANTABILITY,
//  FITNESS for a PARTICULAR PURPOSE and NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS or COPYRIGHT HOLDERS BE LIABLE for ANY CLAIM, DAMAGES or OTHER
//  LIABILITY, WHETHER IN an ACTION of CONTRACT, TORT or OTHERWISE, ARISING from,
//  OUT of or IN CONNECTION WITH THE SOFTWARE or THE Use OR OTHER DEALINGS IN THE
//  SOFTWARE.

Use GlobalFunctionsProcedures.pkg

#IFNDEF gVoid
Global_Variable Integer gVoid
#ENDIF

{Visibility=Private}
Define	C_MAGIC_NONE		        for |CI$000000 /* No flags */
{Visibility=Private}
Define	C_MAGIC_DEBUG		        for |CI$000001 /* Turn on debugging */
{Visibility=Private}
Define	C_MAGIC_SYMLINK	            for |CI$000002 /* Follow symlinks */
{Visibility=Private}
Define	C_MAGIC_COMPRESS	        for |CI$000004 /* Check inside compressed files */
{Visibility=Private}
Define	C_MAGIC_DEVICES	            for |CI$000008 /* Look at the contents of devices */
{Visibility=Private}
Define	C_MAGIC_MIME_TYPE	        for |CI$000010 /* Return the MIME type */
{Visibility=Private}
Define	C_MAGIC_CONTINUE	        for |CI$000020 /* Return All matches */
{Visibility=Private}
Define	C_MAGIC_CHECK   	        for |CI$000040 /* Print warnings to stderr */

{Visibility=Private}
Define	C_MAGIC_PRESERVE_ATIME	    for |CI$0000080 /* Restore access time on exit */
{Visibility=Private}
Define	C_MAGIC_RAW		            for |CI$0000100 /* Don't convert unprintable chars */
{Visibility=Private}
Define	C_MAGIC_ERROR		        for |CI$0000200 /* Handle ENOENT etc as real errors */
{Visibility=Private}
Define	C_MAGIC_MIME_ENCODING	    for |CI$0000400 /* Return the MIME encoding */
{Visibility=Private}
Define	C_MAGIC_APPLE		        for |CI$0000800 /* Return the Apple creator/type */
{Visibility=Private}
Define	C_MAGIC_EXTENSION		    for |CI$1000000 /* Return a /-separated list of extensions */
{Visibility=Private}
Define  C_MAGIC_COMPRESS_TRANSP	    for |CI$2000000 /* Check inside compressed files but not report compression */
{Visibility=Private}
Define  C_MAGIC_NO_COMPRESS_FORK	for |CI$4000000 /* Don't allow decompression that needs to fork */

{Visibility=Private}
Define	C_MAGIC_NO_CHECK_COMPRESS	for |CI$0001000 /* Don't check for compressed files */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_TAR	    for |CI$0002000 /* Don't check for tar files */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_SOFT	    for |CI$0004000 /* Don't check magic entries */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_APPTYPE	for |CI$0008000 /* Don't check application type */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_ELF	    for |CI$0010000 /* Don't check for elf details */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_TEXT	    for |CI$0020000 /* Don't check for text files */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_CDF	    for |CI$0040000 /* Don't check for cdf files */
{Visibility=Private}
Define  C_MAGIC_NO_CHECK_CSV	    for |CI$0080000 /* Don't check for CSV files */
{Visibility=Private}
Define	C_MAGIC_NO_CHECK_TOKENS	    for |CI$0100000 /* Don't check tokens */
{Visibility=Private}
Define  C_MAGIC_NO_CHECK_ENCODING   for |CI$0200000 /* Don't check text encodings */
{Visibility=Private}
Define  C_MAGIC_NO_CHECK_JSON	    for |CI$0400000 /* Don't check for JSON files */

#IFDEF IS$WIN64
#Replace C_MAGIC_MODULE_NAME libmagic64.dll
#ELSE
#Replace C_MAGIC_MODULE_NAME libmagic.dll
#ENDIF

{ Visibility=Private }
External_Function magic_open     "magic_open"     C_MAGIC_MODULE_NAME Integer iFlags Returns Pointer
{ Visibility=Private }
External_Function magic_check    "magic_check"    C_MAGIC_MODULE_NAME Pointer pMagic String sFilePath Returns Integer
{ Visibility=Private }
External_Function magic_load     "magic_load"     C_MAGIC_MODULE_NAME Pointer pMagic Pointer pMagicFile Returns Integer
{ Visibility=Private }
External_Function magic_file     "magic_file"     C_MAGIC_MODULE_NAME Pointer pMagic String sFilePath Returns String
{ Visibility=Private }
External_Function magic_close    "magic_close"    C_MAGIC_MODULE_NAME Pointer pMagic Returns VOID_TYPE
{ Visibility=Private }
External_Function magic_error    "magic_error"    C_MAGIC_MODULE_NAME Pointer pMagic Returns Pointer
{ Visibility=Private }
External_Function magic_buffer   "magic_buffer"   C_MAGIC_MODULE_NAME Pointer pMagic Pointer pBuffer Longptr pSizeOfBuffer Returns String
{ Visibility=Private }
External_Function magic_setflags "magic_setflags" C_MAGIC_MODULE_NAME Pointer pMagic Integer eFlags Returns Integer

{ Visibility=Private }
Global_Variable Pointer __Magic
Move 0 to __Magic

{ Visibility=Private }
Global_Variable Integer __MagicSettings
Move 0 to __MagicSettings

{ Visibility=Private }
Procedure MagicGlobalSetAttr Global Integer eFlags
    Move (__MagicSettings ior eFlags) to __MagicSettings
    Move (magic_setflags(__Magic, __MagicSettings)) to gVoid
End_Procedure

{ Visibility=Private }
Procedure MagicGlobalUnSetAttr Global Integer eFlags
    If ((__MagicSettings iand eFlags) = eFlags) ;
        Move (__MagicSettings - eFlags) to __MagicSettings
    Move (magic_setflags(__Magic, __MagicSettings)) to gVoid
End_Procedure

{ Visibility=Private }
Global_Variable String[] __FileExtMime
{ Visibility=Private }
Global_Variable String[][] __FileExts
{ Visibility=Private }
Include_Text File\mimeext.txt as C_LibFileExt

#IFNDEF GET_StrSplitToArrayTrimmedLower
Function StrSplitToArrayTrimmedLower Global String sString String sDel Returns String[]
    String[] asResult
    Integer iStart iEnd iDel
    
    If (sString <> "") Begin
        
        Move 1 to iStart
        
        Move (Length(sDel)) to iDel
        Move (Pos(sDel, sString, iStart)) to iEnd
        
        If (iEnd > 0) Begin
            While (iEnd > 0)
                Move (Lowercase(Trim(Mid(sString,  iEnd - iStart, iStart)))) to asResult[SizeOfArray(asResult)]
                
                Move (iEnd + iDel) to iStart
                Move (Pos(sDel, sString, iStart)) to iEnd
            Loop
            
            Move (Lowercase(Trim(Right(sString,  Length(sString) - iStart + 1)))) to asResult[SizeOfArray(asResult)]
        End
        Else Begin
            Move (Lowercase(Trim(sString))) to asResult[0]
        End
    End
    
    Function_Return asResult
End_Function
#ENDIF

{ Visibility=Private }
Function FileGlobalInit Global Returns Boolean
    If (__Magic) Function_Return True
    
    Integer iResult
    
    // Initialize the magic handle and indicate that we want the MIME type.
    Move (magic_open(__MagicSettings)) to __Magic
    If (__Magic = 0) Begin
        Error 8710 "Failed to initialize magic library."
        Function_Return False
    End
    
    // Load the default magic database
    Move (magic_load(__Magic, 0)) to iResult
    If (iResult) Begin
        Move (magic_close(__Magic)) to gVoid
        Move 0 to __Magic
        
        Error 8710 "Failed to load the magic library."
        Function_Return False
    End
    
    Integer iPos
    String sMime
    String[] aLines aExts
    
    Move (Replaces(Character(9), C_LibFileExt, " ")) to C_LibFileExt
    Move (Replaces(Character(13), C_LibFileExt, "")) to C_LibFileExt

    Move (StrSplitToArray(C_LibFileExt, Character(10))) to aLines
    For iResult from 0 to (SizeOfArray(aLines) - 1)
        Move (Pos(" ", aLines[iResult])) to iPos
        // First gather the extentions as they can have multiple
        Move (Trim(Mid(aLines[iResult], Length(aLines[iResult]), iPos))) to sMime
        Move (StrSplitToArrayTrimmedLower(sMime, " ")) to aExts
        Move (Lowercase(Trim(Left(aLines[iResult], iPos-1)))) to sMime
        
        Move (BinarySearchArray(sMime, __FileExtMime)) to iPos
        If (iPos = -1) Begin
            Move (BinarySearchInsertPos()) to iPos
            Move (InsertInArray(__FileExtMime, iPos, sMime)) to __FileExtMime
            Move (InsertInArray(__FileExts, iPos, aExts)) to __FileExts
        End
        Else Begin
            Error 8710 "Mime already registered."
            Function_Return False
        End
    Loop
    
    Function_Return True
End_Function

{ Visibility=Private }
Function FileGlobalClose Global Returns Boolean
    If (not(__Magic)) Function_Return True
    Move (magic_close(__Magic)) to gVoid
    Move 0 to __Magic
    Function_Return True
End_Function

Function FileMimeType Global String sFileName Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Send MagicGlobalSetAttr C_MAGIC_MIME_TYPE
    Move (magic_file(__Magic, sFileName)) to sValue
    Send MagicGlobalUnSetAttr C_MAGIC_MIME_TYPE
    Function_Return sValue
End_Function

Function FileMimeTypeOfBufferEx Global Pointer pBuffer Longptr lSize Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Send MagicGlobalSetAttr C_MAGIC_MIME_TYPE
    Move (magic_buffer(__Magic, pBuffer, lSize)) to sValue
    Send MagicGlobalUnSetAttr C_MAGIC_MIME_TYPE
    Function_Return sValue
End_Function

Function FileMimeTypeOfBuffer Global UChar[] ucaBuffer Returns String
    Function_Return (FileMimeTypeOfBufferEx(AddressOf(ucaBuffer), SizeOfArray(ucaBuffer)))
End_Function

Function FileMimeEncoding Global String sFileName Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Send MagicGlobalSetAttr C_MAGIC_MIME_ENCODING
    Move (magic_file(__Magic, sFileName)) to sValue
    Send MagicGlobalUnSetAttr C_MAGIC_MIME_ENCODING
    Function_Return sValue
End_Function

Function FileMimeEncodingOfBufferEx Global Pointer pBuffer Longptr lSize Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Send MagicGlobalSetAttr C_MAGIC_MIME_ENCODING
    Move (magic_buffer(__Magic, pBuffer, lSize)) to sValue
    Send MagicGlobalUnSetAttr C_MAGIC_MIME_ENCODING
    Function_Return sValue
End_Function

Function FileMimeEncodingOfBuffer Global UChar[] ucaBuffer Returns String
    Function_Return (FileMimeEncodingOfBufferEx(AddressOf(ucaBuffer), SizeOfArray(ucaBuffer)))
End_Function

Function FileDescription Global String sFileName Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Move (magic_file(__Magic, sFileName)) to sValue
    Function_Return sValue
End_Function

Function FileDescriptionOfBufferEx Global Pointer pBuffer Longptr lSize Returns String
    If (not(FileGlobalInit())) Begin
        Function_Return ""
    End
    String sValue
    Move (magic_buffer(__Magic, pBuffer, lSize)) to sValue
    Function_Return sValue
End_Function

Function FileDescriptionOfBuffer Global UChar[] ucaBuffer Returns String
    Function_Return (FileDescriptionOfBufferEx(AddressOf(ucaBuffer), SizeOfArray(ucaBuffer)))
End_Function

Function FileExtOfMime Global String sMime Returns String[]
    String[] aExts
    If (not(FileGlobalInit())) Begin
        Function_Return aExts
    End
    
    Integer iPos
    Move (BinarySearchArray(Lowercase(sMime), __FileExtMime)) to iPos
    If (iPos = -1) Function_Return aExts
    
    Function_Return __FileExtMime[iPos]
End_Function

Function FileExtMatchesMime Global String sMime String sExt Returns Boolean
    String[] aExts
    If (not(FileGlobalInit())) Begin
        Function_Return False
    End
    
    Move (Replace(".", sExt, "")) to sExt
    
    Integer iPos iIter
    Move (BinarySearchArray(Lowercase(sMime), __FileExtMime)) to iPos
    If (iPos = -1) Function_Return False
    
    Move (Lowercase(sExt)) to sExt
    
    For iIter from 0 to (SizeOfArray(__FileExts[iPos]) - 1)
        If (sExt = __FileExts[iPos][iIter]) Begin
            Function_Return True
        End
    Loop
    
    Function_Return False
End_Function

Enum_List
    Define C_FileMatch_No_Init for -2
    Define C_FileMatch_File_Not_Found for -1
    Define C_FileMatch_Match for 0
    Define C_FileMatch_NoMatch for 1
    Define C_FileMatch_FileDoesNotMatchContent for 2
End_Enum_List

Function FileMatchesPattern Global String sPattern String sFilename Boolean bOptMatchContent String sOptAsExt Returns Integer
    If (not(FileGlobalInit())) Begin
        Function_Return C_FileMatch_No_Init
    End
    
    Boolean bMatchContent
    Move True to bMatchContent
    If (num_arguments > 2) Move bOptMatchContent to bMatchContent
    
    String[] aPattern
    Move (StrSplitToArrayTrimmedLower(sPattern, ",")) to aPattern
    
    String sExt
    Integer iPos
    If (num_arguments > 3) Begin
        Move sOptAsExt to sExt
    End
    Else Begin
        Move (RightPos(".", sFilename)) to iPos
        If (iPos) Move (Right(sFilename, Length(sFilename) - iPos)) to sExt
    End
    
    String sMime
    Get FileMimeType sFilename to sMime
    If (SizeOfString(sMime) = 0) Function_Return C_FileMatch_File_Not_Found
    
    If (not(FileExtMatchesMime(sMime, sExt)) and bMatchContent) Begin
        Function_Return C_FileMatch_FileDoesNotMatchContent 
    End
    
    Boolean bMatch
    Integer iIter
    For iIter from 0 to (SizeOfArray(aPattern) - 1)
        If (Left(aPattern[iIter], 2) = "*.") Begin
            Move (Right(aPattern[iIter], Length(aPattern[iIter]) - 2)) to aPattern[iIter]
        End
        
        If (Left(aPattern[iIter], 1) = ".") Begin
            // should be a extention
            Move (Right(aPattern[iIter], Length(aPattern[iIter]) - 1)) to aPattern[iIter]
            
            If (aPattern[iIter] = sExt) Begin
                Function_Return C_FileMatch_Match
            End
        End
        Else If (sMime matches aPattern[iIter]) Begin
            Function_Return C_FileMatch_Match
        End
    Loop
    
    Function_Return C_FileMatch_NoMatch
End_Function

Function FileErrToMessage Global Integer iErr String sFileName Returns String
    Case Begin
        Case (iErr = C_FileMatch_File_Not_Found)
            Function_Return ("The to be scanned file '" + sFileName + "', does not exist.")
            Case Break
        Case (iErr = C_FileMatch_NoMatch)
            Function_Return ("The scanned file '" + sFileName + "', is not matching the required file-types.")
            Case Break
        Case (iErr = C_FileMatch_FileDoesNotMatchContent)
            Function_Return ("The scanned file '" + sFileName + "'s extention, does not match it's contents.")
            Case Break
        Case (iErr = C_FileMatch_No_Init)
            Function_Return "The file-detection tool could not be initialised."
            Case Break
        Case (iErr = C_FileMatch_Match)
            Function_Return "The file matched"
            Case Break
        Case Else
            Function_Return "An unknown file-detection error occured."
            Case Break
    Case End
End_Function

Procedure FileThrow Global Integer iErr String sFileName
    If (not(iErr)) Begin
        Procedure_Return
    End
    
    Error 8710 (FileErrToMessage(iErr, sFileName))
End_Procedure
