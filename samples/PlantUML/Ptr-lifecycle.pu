@startuml
' from https://github.com/drbenmorgan/fnal-canvas/blob/develop/doc/Ptr-lifecycle.pu

!include ptrdefs.ipu
title 1. Default construction
participant Module
STAGE(Create)
create Ptr
Module -> Ptr : FUNC(Ptr())
note right of Ptr : ""core_(),""\n""key(key_traits<key_type>::value)""
STAGE(Check ProductID)
Module -> Ptr : FUNC(isNonNull())
Module <- Ptr : FALSE
STAGE(Check Product availability)
Module -> Ptr : FUNC(isAvailable())
Module <- Ptr : FALSE
STAGE(Access)
Module -> Ptr : FUNC(operator -> ())
Module <- Ptr : NULLPTR
STAGE(Dereference)
Module -> Ptr : FUNC(operator * ())
note over PARTICIPANTS #FFAAAA : //SEGFAULT//
@enduml

@startuml
!define PARTICIPANTS Handle, Ptr
!include ptrdefs.ipu
title 2. Construction with Handle
participant Handle
participant Module
STAGE(Create)
create Ptr
Module -> Ptr : FUNC(Ptr(Handle, idx))
note over Ptr : ""core_(Handle.id(),""\n\
""      getItem_(Handle.product(), idx),""\n\
""      0),""\n\
""key_(idx)""
Ptr -> Handle : FUNC(id())
Ptr <- Handle : RESULT_OF(prov_.isValid() ? prov_.productID() : ProductID{})
Ptr -> Handle : FUNC(product())
alt RESULT_OF(prod_ == nullptr)
note over PARTICIPANTS #FFAAAA : //EXCEPTION//
else RESULT_OF(prod_ != nullptr)
Ptr <- Handle : ""prod_""
end
alt RESULT_OF(core_.id().isValid())
STAGE(Check ProductID)
Module -> Ptr : FUNC(isNonNull())
Module <- Ptr : TRUE
STAGE(Check Product availability)
Module -> Ptr : FUNC(isAvailable())
Module <- Ptr : RESULT_OF(core_.productPtr() != nullptr)
STAGE(Access)
Module -> Ptr : FUNC(operator -> ())
Module <- Ptr : RESULT_OF(""core_.productPtr()"")
else RESULT_OF(!core_.id().isValid())
CF(FUNC(Ptr()))
end
@enduml

@startuml
!include ptrdefs.ipu
title 3A. From a ""ProductID""
STAGE(Create)
Module -> Ptr : FUNC(Ptr(productID))
note right of Ptr : ""core_(productID, 0, 0),""\n\
""key_(key_traits<key_type>::value)""
CF(FUNC(Ptr(Handle, idx)))
@enduml

@startuml
!define PARTICIPANTS ProductGetter, RefCore
!include ptrdefs.ipu
title 3B. From a ""ProductID"", index and ""EDProductGetter""
participant ProductGetter
participant Module
STAGE(Create)
create Ptr
Module -> Ptr : FUNC(Ptr(productID, itemKey, prodGetter))
note left of Ptr : ""core_(productID, 0, prodGetter),""\n\
""key_(itemKey)""
alt RESULT_OF(core_.id().isValid())
participant RefCore
STAGE(Check Product availability)
Module -> Ptr : FUNC(isAvailable())
alt RESULT_OF(productPtr() != 0)
Module <- Ptr : TRUE
else
Ptr -> RefCore : FUNC(isAvailable())
Module <- RefCore : RESULT_OF(id_.isValid() &&)\n\
 RESULT_OF(productGetter() != 0 &&)\n\
 RESULT_OF(productGetter()->isReady() &&)\n\
 RESULT_OF(productGetter()->getIt() != 0)
note right of Ptr : Call to ""EDProductGetter::getIt()""\nwill cause product to be resolved\nif possible.
end
STAGE(Access)
Module -> Ptr : FUNC(operator -> ())
Ptr -> Ptr : FUNC(getData_())
Ptr -> ProductGetter : FUNC(getIt())
alt Product resolvable
create prod
ProductGetter -> prod
Ptr <- ProductGetter : ""prod""
Ptr -> prod : FUNC(setPtr(...))
Ptr <- prod
Ptr -> RefCore : FUNC(setProductPtr(...))
Ptr -> Module : FUNC(core_.productPtr())
else
note over PARTICIPANTS #FFAAAA : //EXCEPTION//
end
else RESULT_OF(!core_.id().isValid())
CF(FUNC(Ptr()))
end
@enduml

@startuml
'!define PARTICIPANTS ProductGetter, RefCore
!include ptrdefs.ipu
title 5. From a ""ProductID"", item pointer and index.
STAGE(Create)
create Ptr
Module -> Ptr : FUNC(Ptr(productID, item, itemKey))
note left of Ptr : ""core_(productID, item, 0),""\n\
""key_(itemKey)""
CF(FUNC(Ptr(Handle, idx)))
@enduml
