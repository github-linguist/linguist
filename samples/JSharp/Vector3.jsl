package core;

public class Vector3
{

	public double x, y, z;

	public Vector3()
	{
		this(0);
	}
	public Vector3(double a)
	{
		this(a, a, a);
	}
	public Vector3(double x, double y, double z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}
	public Vector3(Vector3 v)
	{
		this(v.x, v.y, v.z);
	}

	public Object clone()
	{
		return new Vector3(this);
	}

	public double getValue(int i)
    		throws IndexOutOfBoundsException
	{
		switch (i)
		{
			case 0:
				return this.x;
			case 1:
				return this.y;
			case 2:
				return this.z;
			default:
				throw new IndexOutOfBoundsException("Index: " + i);
		}
	}
	public void setValue(int i, double value)
    		throws IndexOutOfBoundsException
	{
		switch (i)
		{
			case 0:
				this.x = value;
				break;
			case 1:
				this.y = value;
				break;
			case 2:
				this.z = value;
				break;
			default:
				throw new IndexOutOfBoundsException("Index: " + i);
		}
	}

	public boolean hasNaNs()
	{
		return Double.isNaN(this.x) || Double.isNaN(this.y) || Double.isNaN(this.z);
	}

	public static Vector3 minus(Vector3 v)
	{
		return new Vector3(-v.x, -v.y, -v.z);
	}
	public static Vector3 add(Vector3 v1, Vector3 v2)
	{
		return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
	}
	public static Vector3 sub(Vector3 v1, Vector3 v2)
	{
		return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
	}
	public static Vector3 mul(Vector3 v1, Vector3 v2)
	{
		return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);
	}
	public static Vector3 div(Vector3 v1, Vector3 v2)
	{
		return new Vector3(v1.x / v2.x, v1.y / v2.y, v1.z / v2.z);
	}
	public static Vector3 add(Vector3 v, double a)
	{
		return new Vector3(v.x + a, v.y + a, v.z + a);
	}
	public static Vector3 sub(Vector3 v, double a)
	{
		return new Vector3(v.x - a, v.y - a, v.z - a);
	}
	public static Vector3 mul(Vector3 v, double a)
	{
		return new Vector3(v.x * a, v.y * a, v.z * a);
	}
	public static Vector3 div(Vector3 v, double a)
	{
		final double inv_a = 1.0 / a;
		return new Vector3(v.x * inv_a, v.y * inv_a, v.z * inv_a);
	}
	public static Vector3 add(double a, Vector3 v)
	{
		return new Vector3(a + v.x, a + v.y, a + v.z);
	}
	public static Vector3 sub(double a, Vector3 v)
	{
		return new Vector3(a - v.x, a - v.y, a - v.z);
	}
	public static Vector3 mul(double a, Vector3 v)
	{
		return new Vector3(a * v.x, a * v.y, a * v.z);
	}
	public static Vector3 div(double a, Vector3 v)
	{
		return new Vector3(a / v.x, a / v.y, a / v.z);
	}

	public double dot(Vector3 v)
	{
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	public Vector3 cross(Vector3 v)
	{
		return new Vector3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
	}

	public int hashCode()
	{
		int hashCode = 0;
		hashCode ^= (new Double(this.x)).GetHashCode();
		hashCode ^= (new Double(this.y)).GetHashCode();
		hashCode ^= (new Double(this.z)).GetHashCode();
		return hashCode;
	}
	public boolean equals(Object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (this.getClass() != obj.getClass())
		{
			return false;
		}
		final Vector3 v = (Vector3)obj;
		return (this.x == v.x) && (this.y == v.y) && (this.z == v.z);
	}
	public static boolean eq(Vector3 v1, Vector3 v2)
	{
		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);
	}
	public static boolean ne(Vector3 v1, Vector3 v2)
	{
		return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z);
	}
	public static boolean lt(Vector3 v1, Vector3 v2)
	{
		return (v1.x < v2.x) && (v1.y < v2.y) && (v1.z < v2.z);
	}
	public static boolean le(Vector3 v1, Vector3 v2)
	{
		return (v1.x <= v2.x) && (v1.y <= v2.y) && (v1.z <= v2.z);
	}
	public static boolean gt(Vector3 v1, Vector3 v2)
	{
		return (v1.x > v2.x) && (v1.y > v2.y) && (v1.z > v2.z);
	}
	public static boolean ge(Vector3 v1, Vector3 v2)
	{
		return (v1.x >= v2.x) && (v1.y >= v2.y) && (v1.z >= v2.z);
	}

	public static Vector3 sqrt(Vector3 v)
	{
		return new Vector3(Math.sqrt(v.x), Math.sqrt(v.y), Math.sqrt(v.z));
	}
	public static Vector3 pow(Vector3 v, double a)
	{
		return new Vector3(Math.pow(v.x, a), Math.pow(v.y, a), Math.pow(v.z, a));
	}
	public static Vector3 abs(Vector3 v)
	{
		return new Vector3(Math.abs(v.x), Math.abs(v.y), Math.abs(v.z));
	}
	public static Vector3 min(Vector3 v1, Vector3 v2)
	{
		return new Vector3(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
	}
	public static Vector3 max(Vector3 v1, Vector3 v2)
	{
		return new Vector3(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
	}
	public static Vector3 round(Vector3 v1, Vector3 v2)
	{
		return new Vector3(Math.round(v1.x), Math.round(v1.y), Math.round(v1.z));
	}
	public static Vector3 floor(Vector3 v1, Vector3 v2)
	{
		return new Vector3(Math.floor(v1.x), Math.floor(v1.y), Math.floor(v1.z));
	}
	public static Vector3 ceil(Vector3 v1, Vector3 v2)
	{
		return new Vector3(Math.ceil(v1.x), Math.ceil(v1.y), Math.ceil(v1.z));
	}
	public static Vector3 trunc(Vector3 v1, Vector3 v2)
	{
		return new Vector3(MathUtils.trunc(v1.x), MathUtils.trunc(v1.y), MathUtils.trunc(v1.z));
	}
	public static Vector3 clamp(Vector3 v, double low, double high)
	{
		return new Vector3(MathUtils.clamp(v.x, low, high), MathUtils.clamp(v.y, low, high), MathUtils.clamp(v.z, low, high));
	}
	public static Vector3 lerp(double a, Vector3 v1, Vector3 v2)
	{
		return add(v1, mul(a, sub(v2, v1)));
	}
	public static Vector3 permute(Vector3 v, int x, int y, int z)
	{
		return new Vector3(v.getValue(x), v.getValue(y), v.getValue(z));
	}

	public int minDimension()
	{
		return (this.x < this.y && this.x < this.z) ? 0 : ((this.y < this.z) ? 1 : 2);
	}
	public int maxDimension()
	{
		return (this.x > this.y && this.x > this.z) ? 0 : ((this.y > this.z) ? 1 : 2);
	}
	public double min()
	{
		return (this.x < this.y && this.x < this.z) ? this.x : ((this.y < this.z) ? this.y : this.z);
	}
	public double max()
	{
		return (this.x > this.y && this.x > this.z) ? this.x : ((this.y > this.z) ? this.y : this.z);
	}

	public double norm2_squared()
	{
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	public double norm2()
	{
		return Math.sqrt(norm2_squared());
	}
	public Vector3 normalize()
	{
		final double a = 1.0 / norm2();
		this.x *= a;
		this.y *= a;
		this.z *= a;
		return this;
	}

	public String toString()
	{
		return "[" + this.x + ' ' + this.y + ' ' + this.z + ']';
	}
}
