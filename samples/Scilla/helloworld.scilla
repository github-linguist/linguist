(***********************************************************************************)
(*               MIT License                                                       *)
(*                                                                                 *)
(*  Copyright (c) 2019 Asindu Willfred Drileba                                     *)
(*                                                                                 *)
(* Permission is hereby granted, free of charge, to any person obtaining a copy    *)
(* of this software and associated documentation files (the "Software"), to deal   *)
(* in the Software without restriction, including without limitation the rights    *)
(* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell       *)
(* copies of the Software, and to permit persons to whom the Software is           *)
(* furnished to do so, subject to the following conditions:                        *)
(*                                                                                 *)
(* The above copyright notice and this permission notice shall be included in all  *)
(* copies or substantial portions of the Software.                                 *)
(*                                                                                 *)
(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR      *)
(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        *)
(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     *)
(* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER          *)
(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,   *)
(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   *)
(* SOFTWARE.                                                                       *)
(***********************************************************************************)

scilla_version 0

(* HelloWorld contract *)

import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library HelloWorld

let one_msg = fun (msg : Message) =>  let nil_msg =  Nil {Message} in  Cons {Message} msg nil_msg
  
let not_owner_code =  Int32 1
let set_hello_code =  Int32 2

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract HelloWorld
(owner: ByStr20)

field welcome_msg : String = ""

transition setHello (msg : String)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    e = {_eventname : "setHello()"; code : not_owner_code};
    event e
  | True =>
    welcome_msg := msg;
    e = {_eventname : "setHello()"; code : set_hello_code};
    event e
  end
end


transition getHello ()
    r <- welcome_msg;
    e = {_eventname: "getHello()"; msg: r};
    event e
end

transition multipleMsgs()
  msg1 = {_tag : ""; _recipient : _sender; _amount : Uint128 0};
  msg2 = {_tag : ""; _recipient : _sender; _amount : Uint128 0};
  msgs1 = one_msg msg1;
  msgs2 = Cons {Message} msg2 msgs1;
  send msgs2
end

transition contrAddr()
  msg1 = {_eventname : "ContractAddress"; addr : _this_address };
  event msg1
end
