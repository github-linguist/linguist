/* Secure Password Generator using reStructuredPython */

import hashlib
import secrets
import threading
import time
include 'decorators.timer' // Built-in timing decorator

@decorators.timer
def generate_multiple_passwords(num_threads) {
    results = []
    threads = []

    for i in range(num_threads) {
        thread = threading.Thread(target=worker, args=(results,))
        threads.append(thread)
        thread.start()
    }

    for thread in threads {
        thread.join()
    }

    return results
}

def worker(results) {
    password = generate_password(20)
    results.append(password)
}

def generate_password(length) {
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+"
    password = ''.join(secrets.choice(alphabet) for _ in range(length))
    return password |> recursive_hash(500)
}

def recursive_hash(data, count) {
    if count == 0 {
        return data
    }
    hashed = hashlib.sha256(data.encode()).hexdigest()
    return recursive_hash(hashed, count - 1)
}

if True {
/* Main Execution */
    passwords = generate_multiple_passwords(5)

    for idx, pwd in enumerate(passwords) {
        print(f"Password {idx + 1}: {pwd}")
    }
}
