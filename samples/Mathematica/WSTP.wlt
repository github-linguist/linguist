Needs["MUnit`"]

(* Test the loader function generated by `generate_loader!`. *)
TestMatch[
	load = LibraryFunctionLoad[
		"libwstp_example",
		"load_wstp_functions",
		LinkObject,
		LinkObject
	];

	$functions = load["libwstp_example"];

	Sort[$functions]
	,
	(*
		These functions will typically have a structure similar to the following:

			Function[
				Block[{$Context = "RustLinkWSTPPrivateContext`", $ContextPath = {}},
					LibraryFunction["/path/to/libwstp_example.dylib", "count_args", LinkObject][
						##
					]
				]
			]

		Setting $Context and $ContextPath before each call to the WSTP library
		function is necessary to force all symbols sent across the link to be
		formatted with their context name included. See the 'Symbol contexts problem'
		section in the crate documentation for more information.
	*)
	<|
		"count_args" -> Function[__],
		"expr_string_join" -> Function[__],
		"link_expr_identity" -> Function[__],
		"square_wstp" -> Function[__],
		"string_join" -> Function[__],
		"total" -> Function[__],
		"total_args_i64" -> Function[__]
	|>
]

Test[
	$functions["square_wstp"][4]
	,
	16
]

(* Test that passing more than one argument to square_wstp() results in a Failure. *)
TestMatch[
	$functions["square_wstp"][4, 4]
	,
	Failure["RustPanic", <|
		"MessageTemplate" -> "Rust LibraryLink function panic: `message`",
		"MessageParameters" -> <|"message" -> "square_wstp: expected to get a single argument"|>,
		"SourceLocation" -> s_?StringQ /; StringStartsQ[s, "wolfram-library-link/examples/wstp.rs:"],
		"Backtrace" -> Missing["NotEnabled"]
	|>]
]

Test[
	$functions["count_args"][a, b, c]
	,
	3
]

Test[
	totalArgsI64 = $functions["total_args_i64"];

	{
		totalArgsI64[2, 2],
		totalArgsI64[1, 2, 3]
	}
	,
	{
		4,
		6
	}
]

Test[
	stringJoin = $functions["string_join"];

	{
		stringJoin["Hello, ", "World!"],
		stringJoin[Sequence @@ CharacterRange["A", "G"]],
		stringJoin[]
	},
	{
		"Hello, World!",
		"ABCDEFG",
		""
	}
]

TestMatch[
	linkExprIdentity = $functions["link_expr_identity"];

	linkExprIdentity[foo[], bar[baz]]
	,
	{foo[], bar[baz]}
]

TestMatch[
	exprStringJoin = $functions["expr_string_join"];

	{
		exprStringJoin[],
		exprStringJoin["Foo"],
		exprStringJoin["Foo", "Bar"],
		exprStringJoin[Sequence @@ CharacterRange["a", "f"]],
		exprStringJoin[1, 2, 3]
	}
	,
	{
		"",
		"Foo",
		"FooBar",
		"abcdef",
		Failure["RustPanic", <|
			"MessageTemplate" -> "Rust LibraryLink function panic: `message`",
			"MessageParameters" -> <|"message" -> "expected String argument, got: 1"|>,
			(* Avoid hard-coding the panic line/column number into the test. *)
			"SourceLocation" -> s_?StringQ /; StringStartsQ[s, "wolfram-library-link/examples/wstp.rs:"],
			"Backtrace" -> Missing["NotEnabled"]
		|>]
	}
]

TestMatch[
	total = $functions["total"];

	{
		total[],
		total[1, 2, 3],
		total[1, 2.5, 7],
		(* Cause an integer overflow. *)
		total[2^62, 2^62, 2^62],
		total[5, "Hello"]
	}
	,
	{
		0,
		6,
		10.5,
		Failure["RustPanic", <|
			"MessageTemplate" -> "Rust LibraryLink function panic: `message`",
			"MessageParameters" -> <|"message" -> "attempt to add with overflow"|>,
			"SourceLocation" -> s0_?StringQ /; StringStartsQ[s0, "wolfram-library-link/examples/wstp.rs:"],
			"Backtrace" -> Missing["NotEnabled"]
		|>],
		Failure["RustPanic", <|
			"MessageTemplate" -> "Rust LibraryLink function panic: `message`",
			"MessageParameters" -> <|
				"message" -> "expected argument at position 2 to be a number, got \"Hello\""
			|>,
			"SourceLocation" -> s1_?StringQ /; StringStartsQ[s1, "wolfram-library-link/examples/wstp.rs:"],
			"Backtrace" -> Missing["NotEnabled"]
		|>]
	}
]