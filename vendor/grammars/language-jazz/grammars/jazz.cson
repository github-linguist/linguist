'scopeName': 'source.jazz'
'name': 'Jazz'
'fileTypes': [
    'jazz'
]
'patterns': [
	# Comments.
	{
		'match': '(;;(?:.*[^\n])?)'
		'name': 'comment.line.jazz'
	}
    # Integers and decimals.
	{
	    'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
	    'name': 'constant.numeric.jazz'
	}
    # Strings.
	{
		'begin': '"'
		'beginCaptures':
			'0':
				'name': 'punctuation.definition.string.begin.jazz'
		'end': '"'
		'endCaptures':
			'0':
				'name': 'punctuation.definition.string.end.jazz'
		'name': 'string.quoted.double.jazz'
		'patterns': [
			{
				'match': '\\\\.'
				'name': 'constant.character.escape.jazz'
			}
		]
	}
    # Characters.
	{
		'begin': '\''
		'beginCaptures':
			'0':
				'name': 'punctuation.definition.string.begin.jazz'
		'end': '\''
		'endCaptures':
			'0':
				'name': 'punctuation.definition.string.end.jazz'
		'name': 'string.quoted.single.jazz'
		'patterns': [
			{
				'match': '\\\\.'
				'name': 'constant.character.escape.jazz'
			}
		]
	}
    # Module declaration.
	{
		'match': '(module)(?: \\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(\\((?:(?:[^;\\n]*\\))|(.*)(;;.*[\\)]?))))?'
		'captures':
			'1':
				'name': 'storage.type.jazz'
			'2':
				'name': 'entity.name.class.jazz'
			'3':
				'name': 'variable.other.jazz'
			'5':
				'name': 'comment.line.jazz'
		'name': 'meta.function.jazz'
	}
    # Function/structure declaration.
	{
		'match': '(func|struct)(?: \\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(\\((?:(?:[^;\\n]*\\))|(.*)(;;.*[\\)]?))))?'
		'captures':
			'1':
				'name': 'storage.type.jazz'
			'2':
				'name': 'entity.name.function.jazz'
			'3':
				'name': 'variable.parameter.jazz'
			'5':
				'name': 'comment.line.jazz'
		'name': 'meta.function.jazz'
	}
    # Primitives.
    {
        'match': '\\b(int|float|char|bool)\\b'
        'name': 'support.type.jazz'
    }
    # Keywords.
	{
		'match': '\\b(?:(priv|pub|final|static|native)|(cast|keyword|use)|(for|if|else|return|try|catch|print|err|exit)|(true|false|nil))\\b'
		'captures':
			'1':
				'name': 'storage.modifier.jazz'
			'2':
				'name': 'support.type.jazz'
			'3':
				'name': 'keyword.control.jazz'
			'4':
				'name': 'constant.lanuage.jazz'
		'name': 'meta.function.jazz'
	}
    # Objects.
    {
        'match': '\\b([_a-zA-Z][_a-zA-Z0-9]*(?:(?:\\[.*\\])|(?:\\(.*\\))?))\\.([_a-zA-Z][_a-zA-Z0-9]*)\\b'
        'captures':
            '1':
                'name': 'variable.defined.jazz'
            '2':
                'name': 'entity.name.function.jazz'
        'name': 'meta.nestedobject.jazz'
    }
    # Special operators.
    {
        'match': '->'
        'name': 'constant.language.jazz'
    }
]
