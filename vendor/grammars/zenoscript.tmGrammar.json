{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Zenoscript",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#types"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.zenoscript",
                    "match": "\\b(if|else|elif|while|for|in|return|break|continue|match|case|default|try|catch|finally|throw)\\b"
                },
                {
                    "name": "keyword.declaration.zenoscript",
                    "match": "\\b(let|const|var|fn|type|interface|class|enum|import|export|from|as)\\b"
                },
                {
                    "name": "keyword.other.zenoscript",
                    "match": "\\b(this|super|self|null|undefined|true|false)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.zenoscript",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.zenoscript",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.zenoscript",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.zenoscript",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.template.zenoscript",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        {
                            "name": "meta.embedded.expression.zenoscript",
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.zenoscript",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.zenoscript",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.zenoscript",
                    "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.hex.zenoscript",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.zenoscript",
                    "match": "\\b0[bB][01]+\\b"
                },
                {
                    "name": "constant.numeric.octal.zenoscript",
                    "match": "\\b0[oO][0-7]+\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.zenoscript",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.zenoscript",
                    "match": "\\b(int|float|string|bool|void|any|never|unknown)\\b"
                },
                {
                    "name": "entity.name.type.zenoscript",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.zenoscript",
                    "match": "[+\\-*/%]"
                },
                {
                    "name": "keyword.operator.comparison.zenoscript",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.logical.zenoscript",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.assignment.zenoscript",
                    "match": "(=|\\+=|-=|\\*=|/=|%=)"
                },
                {
                    "name": "keyword.operator.other.zenoscript",
                    "match": "(\\.|\\?|:|;|,|\\|>|<\\||->|=>)"
                }
            ]
        }
    },
    "scopeName": "source.zenoscript"
}